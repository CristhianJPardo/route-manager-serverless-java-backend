AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Router Manager Backend con microservicios Lambda en Java y SupaBase

Parameters:
  DBPassword:
    Type: String
    NoEcho: true
    Description: ContraseÃ±a de la base de datos (la inyectas desde CI)

Globals:
  Function:
    Runtime: java11
    Timeout: 10
    MemorySize: 512
    Environment:
      Variables:
        SUPABASE_URL: ""
        SUPABASE_API_KEY: ""
        # ParÃ¡metros fijos en plantilla
        DB_HOST: db.rjfcrbysxgylfjtyluor.supabase.co
        DB_PORT: "5432"
        DB_NAME: postgres
        DB_USER: postgres
        DB_PASSWORD: !Ref DBPassword

Resources:
  #########################################
  # API GATEWAY â€“ Explicit Rest API
  #########################################
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: RouteManagerApi
      StageName: Prod
      Cors:
        AllowOrigin: "*"
        AllowHeaders: "Content-Type,Authorization"
        AllowMethods: "OPTIONS,GET,POST,PUT,DELETE"

  #########################################
  # AUTH â€“ Login & Register
  #########################################
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: co.lacorporacionun.auth.AuthHandler
      CodeUri: modules/auth/target/auth.jar
      Environment:
        Variables:
          DB_HOST: !Ref DBHost
          DB_PORT: !Ref DBPort
          DB_NAME: !Ref DBName
          DB_USER: !Ref DBUser
          DB_PASSWORD: !Ref DBPassword
          JWT_SECRET: "1234"
      Events:
        RegisterUser:
          Type: Api
          Properties:
            Path: /api/v1/auth/register
            Method: post
            RestApiId: !Ref ApiGateway
        LoginUser:
          Type: Api
          Properties:
            Path: /api/v1/auth/login
            Method: post
            RestApiId: !Ref ApiGateway
        AuthOptions:
          Type: Api
          Properties:
            Path: /api/v1/auth/{proxy+}
            Method: options
            RestApiId: !Ref ApiGateway


  #########################################
  # CLIENTS â€“ CRUD en una sola Lambda
  #########################################
  ClientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: co.lacorporacionun.clients.ClientsHandler
      CodeUri: modules/clients/target/clients.jar
      Environment:
        Variables:
          TABLE_NAME: clients
      Events:

        ListClients:
          Type: Api
          Properties:
            Path: /api/v1/clients
            Method: get  
            RestApiId: !Ref ApiGateway

        CreateClient:
          Type: Api
          Properties:
            Path: /api/v1/clients
            Method: post
            RestApiId: !Ref ApiGateway

        GetClientById:
          Type: Api
          Properties:
            Path: /api/v1/clients/{id}
            Method: get
            RestApiId: !Ref ApiGateway

        UpdateClientById:
          Type: Api
          Properties:
            Path: /api/v1/clients/{id}
            Method: put
            RestApiId: !Ref ApiGateway

        DeleteClientById:
          Type: Api
          Properties:
            Path: /api/v1/clients/{id}
            Method: delete
            RestApiId: !Ref ApiGateway

        # Se agrega soporte explÃ­cito para OPTIONS (CORS) en las rutas
        OptionsClients:
          Type: Api
          Properties:
            Path: /api/v1/clients
            Method: options
            RestApiId: !Ref ApiGateway

        OptionsClientById:
          Type: Api
          Properties:
            Path: /api/v1/clients/{id}
            Method: options
            RestApiId: !Ref ApiGateway
  #########################################
  # DRIVERS â€“ CRUD en una sola Lambda
  #########################################
  DriversFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: co.lacorporacionun.drivers.DriversHandler
      CodeUri: modules/drivers/target/drivers.jar
      Environment:
        Variables:
          TABLE_NAME: drivers
      Events:
        ListDrivers:
          Type: Api
          Properties:
            Path: /api/v1/drivers
            Method: get
            RestApiId: !Ref ApiGateway

        CreateDriver:
          Type: Api
          Properties:
            Path: /api/v1/drivers
            Method: post
            RestApiId: !Ref ApiGateway

        GetDriverById:
          Type: Api
          Properties:
            Path: /api/v1/drivers/{id}
            Method: get
            RestApiId: !Ref ApiGateway

        UpdateDriverById:
          Type: Api
          Properties:
            Path: /api/v1/drivers/{id}
            Method: put
            RestApiId: !Ref ApiGateway

        DeleteDriverById:
          Type: Api
          Properties:
            Path: /api/v1/drivers/{id}
            Method: delete
            RestApiId: !Ref ApiGateway

        # ðŸ”½ Nuevos eventos para habilitar CORS explÃ­citamente
        OptionsDrivers:
          Type: Api
          Properties:
            Path: /api/v1/drivers
            Method: options
            RestApiId: !Ref ApiGateway

        OptionsDriverById:
          Type: Api
          Properties:
            Path: /api/v1/drivers/{id}
            Method: options
            RestApiId: !Ref ApiGateway


  # #########################################
  # # ROUTES
  # #########################################
  # CreateRouteFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: co.lacoporporacionun.routes.CreateRouteHandler
  #     CodeUri: modules/routes/target/routes.jar
  #     Events:
  #       ApiCreateRoute:
  #         Type: Api
  #         Properties:
  #           Path: /api/v1/routes
  #           Method: post
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref RoutesTable

  #########################################
  # HEALTH
  #########################################
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: co.lacorporacionun.health.HealthCheckHandler
      CodeUri: modules/health/target/health.jar
      Events:
        ApiPing:
          Type: Api
          Properties:
            Path: /ping
            Method: get
            RestApiId: !Ref ApiGateway

        ApiDbPing:
          Type: Api
          Properties:
            Path: /health/db
            Method: get
            RestApiId: !Ref ApiGateway

        # ðŸ”½ Nuevos eventos OPTIONS para CORS
        OptionsPing:
          Type: Api
          Properties:
            Path: /ping
            Method: options
            RestApiId: !Ref ApiGateway

        OptionsDbPing:
          Type: Api
          Properties:
            Path: /health/db
            Method: options
            RestApiId: !Ref ApiGateway

Outputs:
  BaseApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
