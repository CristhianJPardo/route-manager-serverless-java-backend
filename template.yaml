AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Router Manager Backend con microservicios Lambda en Java y SupaBase

Parameters:
  DBPassword:
    Type: String
    NoEcho: true
    Description: Contraseña de la base de datos (la inyectas desde CI)

Globals:
  Function:
    Runtime: java11
    Timeout: 10
    MemorySize: 512
    Environment:
      Variables:
        SUPABASE_URL: ""
        SUPABASE_API_KEY: ""
        # Parámetros fijos en plantilla
        DB_HOST: db.rjfcrbysxgylfjtyluor.supabase.co
        DB_PORT: "5432"
        DB_NAME: postgres
        DB_USER: postgres
        DB_PASSWORD: !Ref DBPassword

Resources:

  #########################################
  # CLIENTS – CRUD en una sola Lambda
  #########################################
  ClientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: co.lacorporacionun.clients.ClientsHandler
      CodeUri: modules/clients/target/clients.jar
      Environment:
        Variables:
          TABLE_NAME: clients
      Events:
        ListClients:
          Type: Api
          Properties:
            Path: /api/v1/clients
            Method: get
        CreateClient:
          Type: Api
          Properties:
            Path: /api/v1/clients
            Method: post
        GetClientById:
          Type: Api
          Properties:
            Path: /api/v1/clients/{id}
            Method: get
        UpdateClientById:
          Type: Api
          Properties:
            Path: /api/v1/clients/{id}
            Method: put
        DeleteClientById:
          Type: Api
          Properties:
            Path: /api/v1/clients/{id}
            Method: delete

  #########################################
  # DRIVERS – CRUD en una sola Lambda
  #########################################
  DriversFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: co.lacorporacionun.drivers.DriversHandler
      CodeUri: modules/drivers/target/drivers.jar
      Environment:
        Variables:
          TABLE_NAME: drivers
      Events:
        ListDrivers:
          Type: Api
          Properties:
            Path: /api/v1/drivers
            Method: get
        CreateDriver:
          Type: Api
          Properties:
            Path: /api/v1/drivers
            Method: post
        GetDriverById:
          Type: Api
          Properties:
            Path: /api/v1/drivers/{id}
            Method: get
        UpdateDriverById:
          Type: Api
          Properties:
            Path: /api/v1/drivers/{id}
            Method: put
        DeleteDriverById:
          Type: Api
          Properties:
            Path: /api/v1/drivers/{id}
            Method: delete

  # #########################################
  # # ROUTES
  # #########################################
  # CreateRouteFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: co.lacoporporacionun.routes.CreateRouteHandler
  #     CodeUri: modules/routes/target/routes.jar
  #     Events:
  #       ApiCreateRoute:
  #         Type: Api
  #         Properties:
  #           Path: /api/v1/routes
  #           Method: post
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref RoutesTable

  #########################################
  # HEALTH
  #########################################
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: co.lacorporacionun.health.HealthCheckHandler
      CodeUri: modules/health/target/health.jar
      Events:
        ApiPing:
          Type: Api
          Properties:
            Path: /ping
            Method: get
        ApiDbPing:
          Type: Api
          Properties:
            Path: /health/db
            Method: get
Outputs:
  BaseApiUrl:
    Description: URL base de la API Gateway
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
